{"version":3,"sources":["inputRange.ts","main.js"],"names":["element","document","getElementById","inputRange","InputRange"],"mappings":"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","file":"main.f7ce1c2f.js","sourceRoot":"../src","sourcesContent":["/* Selectors */\nconst INPUT_CLASS = 'js-irange-input';\nconst SCALE_CLASS = 'js-irange-scale';\nconst SCALE_ACTIVE_CLASS = 'js-irange-active';\nconst HANDLE_CLASS = 'js-irange-handle';\n\n/**\n * @param {HTMLElement} root\n * @param {string} className\n * @returns {HTMLElement[]}\n */\nfunction byClass(root, className) {\n    if (root) {\n        if (root.nodeType === 11) { // == Node.DOCUMENT_FRAGMENT_NODE\n            let result = [];\n            for (let df = 0; df < root.childNodes.length; df++) {\n                let childNode = root.childNodes[df];\n                if (childNode.getElementsByClassName) {\n                    result = result.concat([...childNode.getElementsByClassName(className)]);\n                }\n            }\n            return result;\n        }\n        return [...root.getElementsByClassName(className)];\n    }\n    return [];\n}\n\n/**\n * @param {HTMLElement} root\n * @param {string} className\n * @returns {?HTMLElement}\n */\nfunction firstByClass(root, className) {\n    let elements = byClass(root, className);\n    return elements.length ? elements[0] : null;\n}\n\ninterface IStep {\n    delta: number;\n    max: number;\n    steps?: number;\n}\n\nexport class InputRange {\n    el: HTMLElement;\n    protected input: HTMLInputElement;\n    scale: HTMLElement;\n    scaleActive: HTMLElement;\n    handle: HTMLElement;\n    \n    inputMin: number;\n    inputMax: number;\n    value: number;\n    stepPx: number;\n    steps: Array<IStep>;\n    boundInputChange: EventHandlerNonNull;\n\n    flagDragging = false;\n\n    constructor(element: HTMLElement) {\n        this.el = element;\n        this.input = firstByClass(element, INPUT_CLASS) as HTMLInputElement;\n        this.inputMin = parseInt(this.input.getAttribute('min') || this.input.getAttribute('data-min'), 10);\n        this.inputMax = parseInt(this.input.getAttribute('max') || this.input.getAttribute('data-max'), 10);\n\n        let stepAttrInput = this.input.getAttribute('data-steps');\n        if (stepAttrInput) {\n            this.steps = JSON.parse(this.input.getAttribute('data-steps'));\n        } else {\n            this.steps = [{delta: 1, max: this.inputMax}];\n        }\n\n        this.scale = firstByClass(element, SCALE_CLASS);\n        this.scaleActive = firstByClass(element, SCALE_ACTIVE_CLASS);\n\n        this.handle = firstByClass(element, HANDLE_CLASS);\n\n        this.boundInputChange = this.inputChange;\n\n        this.input.addEventListener('keyup', this.boundInputChange);\n        this.input.addEventListener('change', this.boundInputChange);\n        this.handle.addEventListener('mousedown',this.changeFlagTrue);\n\n        document.addEventListener('mouseup',this.changeFlagFalse);\n        document.addEventListener('mousemove', this.dragHandle);\n\n        this.scale.addEventListener('click', this.onClick);\n\n        let numSteps = 0, max = this.inputMin;\n        this.steps.forEach(function (step) {\n            step.steps = (step.max - max) / step.delta;\n            numSteps += step.steps;\n            max = step.max;\n        });\n\n        this.stepPx = 100 / numSteps; // 100%\n\n        this.inputChange();\n    }\n\n    setValue(value: number) {\n        this.setInputValue(value);\n\n        if (this.value === value) {\n            return;\n        }\n\n        let left = 0;\n        let valuePx = 0;\n        let stepPx = this.stepPx;\n        let inputMin = this.inputMin;\n\n        this.steps.forEach(function (step) {\n            valuePx += (stepPx * step.steps / (step.max - inputMin)) * (Math.min(value, step.max) - left - inputMin);\n            left += step.max;\n        });\n\n        if (valuePx < 0) {\n            valuePx = 0;\n        }\n\n        if (valuePx > 100) {\n            valuePx = 100;\n        }\n\n        this.applyTransform(valuePx);\n    }\n\n    inputChange = () => {\n        let value = parseInt(this.input.value, 10);\n\n        if (isNaN(value) || (value < this.inputMin)) {\n            this.setValue(this.inputMin);\n        } else if (value > this.inputMax) {\n            this.setValue(this.inputMax);\n        } else {\n            this.setValue(value);\n        }\n    };\n\n    changeFlagTrue = (e: Event) => {\n        e.preventDefault();\n        this.setDragging(true);\n    };\n\n    changeFlagFalse = (e: Event) => {\n        e.preventDefault();\n        this.setDragging(false);\n    };\n\n    setDragging(dragging: boolean) {\n        this.flagDragging = dragging;\n        this.el.classList.toggle('__dragging', dragging);\n    }\n\n    onClick = (e: MouseEvent) => {\n        this.recalcHandlePosition(e);\n    };\n\n    dragHandle = (e: MouseEvent) => {\n        if (this.flagDragging) {\n            this.recalcHandlePosition(e);\n        }\n    };\n\n    recalcHandlePosition(e: MouseEvent) {\n        let mouseMove = e.clientX;\n        let scalePositionLeft = this.scale.getBoundingClientRect().left;\n        let valuePx = ((mouseMove - scalePositionLeft) / this.scale.offsetWidth) * 100;\n        let roundedValuePx = valuePx - valuePx % this.stepPx;\n\n        if (roundedValuePx < 0) {\n            roundedValuePx = 0;\n        }\n\n        if (roundedValuePx > 100) {\n            roundedValuePx = 100;\n        }\n\n        let value = this.inputMin,\n            stepsLeft = Math.round(roundedValuePx / this.stepPx);\n\n        this.steps.forEach(function (step) {\n            if (stepsLeft > 0) {\n                let stepsMin = Math.min(stepsLeft, step.steps);\n                value += stepsMin * step.delta;\n                stepsLeft -= stepsMin;\n            }\n        });\n\n        this.applyTransform(roundedValuePx);\n\n        this.value = value;\n        this.setInputValue(Math.floor(value));\n    }\n\n    setInputValue(value: number) {\n        this.input.value = this.format(value);\n    }\n\n    applyTransform(percent) {\n        this.handle.style.left = `${percent}%`;\n        this.scaleActive.style.width = `${percent}%`;\n    }\n\n    format(value: number): string {\n        return `${value}`;\n    }\n\n    destroy() {\n        this.input.removeEventListener('keyup',this.boundInputChange);\n        this.input.removeEventListener('change',this.boundInputChange);\n        this.handle.removeEventListener('mousedown',this.changeFlagTrue);\n        document.removeEventListener('mouseup',this.changeFlagFalse);\n        document.removeEventListener('mousemove', this.dragHandle);\n        this.scale.removeEventListener('click', this.onClick);\n    }\n}","import {InputRange} from './inputRange.ts';\n\nlet element = document.getElementById('inputRange');\nlet inputRange = new InputRange(element);"]}